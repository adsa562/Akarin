From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Sotr <i@omc.hk>
Date: Wed, 15 Apr 2020 22:18:01 +0700
Subject: [PATCH] Remove vanilla profiler callers


diff --git a/src/main/java/com/destroystokyo/paper/server/ticklist/PaperTickList.java b/src/main/java/com/destroystokyo/paper/server/ticklist/PaperTickList.java
index 4263eb917274ddc7acd9651caf7510a36c0558d6..aec534594c04d1e6d192ff6143ba95710c02b1c1 100644
--- a/src/main/java/com/destroystokyo/paper/server/ticklist/PaperTickList.java
+++ b/src/main/java/com/destroystokyo/paper/server/ticklist/PaperTickList.java
@@ -272,7 +272,7 @@ public final class PaperTickList<T> extends TickListServer<T> { // extend to avo
         com.tuinity.tuinity.util.TickThread.softEnsureTickThread("async tick list tick"); // Tuinity - soft async catcher
         final ChunkProviderServer chunkProvider = this.world.getChunkProvider();
 
-        this.world.getMethodProfiler().enter("cleaning");
+        //this.world.getMethodProfiler().enter("cleaning"); // Akarin - remove caller
         this.timingCleanup.startTiming();
 
         this.prepare();
@@ -283,7 +283,7 @@ public final class PaperTickList<T> extends TickListServer<T> { // extend to avo
         this.nextTick = this.world.getTime() + 1;
 
         this.timingCleanup.stopTiming();
-        this.world.getMethodProfiler().exitEnter("ticking");
+        //this.world.getMethodProfiler().exitEnter("ticking"); // Akarin - remove caller
         this.timingTicking.startTiming();
 
         for (final NextTickListEntry<T> toTick : this.toTickThisTick) {
@@ -316,7 +316,7 @@ public final class PaperTickList<T> extends TickListServer<T> { // extend to avo
         }
 
         this.timingTicking.stopTiming();
-        this.world.getMethodProfiler().exit();
+        //this.world.getMethodProfiler().exit(); // Akarin - remove caller
         this.timingFinished.startTiming();
 
         // finished ticking, actual cleanup time
diff --git a/src/main/java/net/minecraft/server/ChunkProviderServer.java b/src/main/java/net/minecraft/server/ChunkProviderServer.java
index 0459a591ac5a32de36ba37410744994377457abb..4c3707852389dc7192feb3c1190484305a0c1c7d 100644
--- a/src/main/java/net/minecraft/server/ChunkProviderServer.java
+++ b/src/main/java/net/minecraft/server/ChunkProviderServer.java
@@ -640,7 +640,7 @@ public class ChunkProviderServer extends IChunkProvider {
             // Paper end
             GameProfilerFiller gameprofilerfiller = this.world.getMethodProfiler();
 
-            gameprofilerfiller.c("getChunk");
+            //gameprofilerfiller.c("getChunk"); // Akarin - remove caller
             long k = ChunkCoordIntPair.pair(i, j);
 
             IChunkAccess ichunkaccess;
@@ -654,7 +654,7 @@ public class ChunkProviderServer extends IChunkProvider {
                 }
             }
 
-            gameprofilerfiller.c("getChunkCacheMiss");
+            //gameprofilerfiller.c("getChunkCacheMiss"); // Akarin - remove caller
             CompletableFuture<Either<IChunkAccess, PlayerChunk.Failure>> completablefuture = this.getChunkFutureMainThread(i, j, chunkstatus, flag, true); // Paper
 
             if (!completablefuture.isDone()) { // Paper
@@ -732,11 +732,11 @@ public class ChunkProviderServer extends IChunkProvider {
             if (this.a(playerchunk, l)) {
                 GameProfilerFiller gameprofilerfiller = this.world.getMethodProfiler();
 
-                gameprofilerfiller.enter("chunkLoad");
+                //gameprofilerfiller.enter("chunkLoad"); // Akarin - remove caller
                 chunkMapDistance.delayDistanceManagerTick = false; // Paper - ensure this is never false
                 this.tickDistanceManager();
                 playerchunk = this.getChunk(k);
-                gameprofilerfiller.exit();
+                //gameprofilerfiller.exit(); // Akarin - remove caller
                 if (this.a(playerchunk, l)) {
                     this.chunkMapDistance.removeTicketAtLevel(TicketType.REQUIRED_LOAD, chunkcoordintpair, l, identifier); // Tuinity
                     throw (IllegalStateException) SystemUtils.c(new IllegalStateException("No chunk holder after ticket has been added"));
@@ -891,33 +891,33 @@ public class ChunkProviderServer extends IChunkProvider {
 
     // CraftBukkit start - modelled on below
     public void purgeUnload() {
-        this.world.getMethodProfiler().enter("purge");
+        //this.world.getMethodProfiler().enter("purge"); // Akarin - remove caller
         this.chunkMapDistance.purgeTickets();
         this.tickDistanceManager();
-        this.world.getMethodProfiler().exitEnter("unload");
+        //this.world.getMethodProfiler().exitEnter("unload"); // Akarin - remove caller
         this.playerChunkMap.unloadChunks(() -> true);
-        this.world.getMethodProfiler().exit();
+        //this.world.getMethodProfiler().exit(); // Akarin - remove caller
         this.clearCache();
     }
     // CraftBukkit end
 
     public void tick(BooleanSupplier booleansupplier) {
-        this.world.getMethodProfiler().enter("purge");
+        //this.world.getMethodProfiler().enter("purge"); // Akarin - remove caller
         this.world.timings.doChunkMap.startTiming(); // Spigot
         this.chunkMapDistance.purgeTickets();
         // Tuinity - replace logic
         this.tickDistanceManager();
         this.world.timings.doChunkMap.stopTiming(); // Spigot
-        this.world.getMethodProfiler().exitEnter("chunks");
+        //this.world.getMethodProfiler().exitEnter("chunks"); // Akarin - remove caller
         this.world.timings.chunks.startTiming(); // Paper - timings
         this.tickChunks();
         this.world.timings.chunks.stopTiming(); // Paper - timings
         this.world.timings.doChunkUnload.startTiming(); // Spigot
-        this.world.getMethodProfiler().exitEnter("unload");
+        //this.world.getMethodProfiler().exitEnter("unload"); // Akarin - remove caller
         this.playerChunkMap.unloadChunks(booleansupplier);
         // Tuinity - replace logic
         this.world.timings.doChunkUnload.stopTiming(); // Spigot
-        this.world.getMethodProfiler().exit();
+        //this.world.getMethodProfiler().exit(); // Akarin - remove caller
         this.clearCache();
     }
 
@@ -971,11 +971,11 @@ public class ChunkProviderServer extends IChunkProvider {
                 player.lastEntitySpawnRadiusSquared = (double)((range << 4) * (range << 4)); // used in isOutsideRange
             }
             // Paper end - optimize isOutisdeRange
-            this.world.getMethodProfiler().enter("pollingChunks");
+            //this.world.getMethodProfiler().enter("pollingChunks"); // Akarin - remove caller
             int k = this.world.getGameRules().getInt(GameRules.RANDOM_TICK_SPEED);
             boolean flag2 = world.ticksPerAnimalSpawns != 0L && worlddata.getTime() % world.ticksPerAnimalSpawns == 0L; // CraftBukkit
 
-            this.world.getMethodProfiler().enter("naturalSpawnCount");
+            //this.world.getMethodProfiler().enter("naturalSpawnCount"); // Akarin - remove caller
             this.world.timings.countNaturalMobs.startTiming(); // Paper - timings
             int l = this.chunkMapDistance.b();
             // Paper start - per player mob spawning
@@ -997,7 +997,7 @@ public class ChunkProviderServer extends IChunkProvider {
             this.world.timings.countNaturalMobs.stopTiming(); // Paper - timings
 
             this.p = spawnercreature_d;
-            this.world.getMethodProfiler().exit();
+            //this.world.getMethodProfiler().exit(); // Akarin - remove caller
             //List<PlayerChunk> list = Lists.newArrayList(this.playerChunkMap.f()); // Paper
             //Collections.shuffle(list); // Paper
             // Paper - moved up
@@ -1007,11 +1007,11 @@ public class ChunkProviderServer extends IChunkProvider {
                 PlayerChunk playerchunk = chunk.playerChunk;
                 if (playerchunk != null) { // make sure load event has been called along with the load logic we put there
                     // Tuinity end - optimise chunk tick iteration
-                    this.world.getMethodProfiler().enter("broadcast");
+                    //this.world.getMethodProfiler().enter("broadcast"); // Akarin - remove caller
                     this.world.timings.broadcastChunkUpdates.startTiming(); // Paper - timings
                     playerchunk.a(chunk); // Tuinity
                     this.world.timings.broadcastChunkUpdates.stopTiming(); // Paper - timings
-                    this.world.getMethodProfiler().exit();
+                    //this.world.getMethodProfiler().exit(); // Akarin - remove caller
                     // Tuinity
 
                     if (true) { // Tuinity
@@ -1048,15 +1048,15 @@ public class ChunkProviderServer extends IChunkProvider {
                 }
             }
             // Tuinity end - optimise chunk tick iteration
-            this.world.getMethodProfiler().enter("customSpawners");
+            //this.world.getMethodProfiler().enter("customSpawners"); // Akarin - remove caller
             if (flag1) {
                 try (co.aikar.timings.Timing ignored = this.world.timings.miscMobSpawning.startTiming()) { // Paper - timings
                 this.world.doMobSpawning(this.allowMonsters, this.allowAnimals);
                 } // Paper - timings
             }
 
-            this.world.getMethodProfiler().exit();
-            this.world.getMethodProfiler().exit();
+            //this.world.getMethodProfiler().exit(); // Akarin - remove caller
+            //this.world.getMethodProfiler().exit(); // Akarin - remove caller
         }
 
         // Tuinity start - controlled flush for entity tracker packets
@@ -1214,7 +1214,7 @@ public class ChunkProviderServer extends IChunkProvider {
 
         @Override
         protected void executeTask(Runnable runnable) {
-            ChunkProviderServer.this.world.getMethodProfiler().c("runTask");
+            //ChunkProviderServer.this.world.getMethodProfiler().c("runTask"); // Akarin - remove caller
             super.executeTask(runnable);
         }
         // Tuinity - replace logic
diff --git a/src/main/java/net/minecraft/server/CommandDispatcher.java b/src/main/java/net/minecraft/server/CommandDispatcher.java
index e59151d01b4710b750366a395e1e5d18caa4726f..86e9716ebc324083666f02dde3fab3251477dda0 100644
--- a/src/main/java/net/minecraft/server/CommandDispatcher.java
+++ b/src/main/java/net/minecraft/server/CommandDispatcher.java
@@ -169,7 +169,7 @@ public class CommandDispatcher {
             stringreader.skip();
         }
 
-        commandlistenerwrapper.getServer().getMethodProfiler().enter(s);
+        //commandlistenerwrapper.getServer().getMethodProfiler().enter(s); // Akarin - remove caller
 
         byte b0;
 
@@ -232,7 +232,7 @@ public class CommandDispatcher {
                 b0 = 0;
             }
         } finally {
-            commandlistenerwrapper.getServer().getMethodProfiler().exit();
+            //commandlistenerwrapper.getServer().getMethodProfiler().exit(); // Akarin - remove caller
         }
 
         return b0;
diff --git a/src/main/java/net/minecraft/server/CustomFunctionData.java b/src/main/java/net/minecraft/server/CustomFunctionData.java
index 423e4d12aba9197b936e69dfd4146ceeca3a30c4..ddfd127d0e618d373086caf2c0ce6ca218a0b021 100644
--- a/src/main/java/net/minecraft/server/CustomFunctionData.java
+++ b/src/main/java/net/minecraft/server/CustomFunctionData.java
@@ -45,7 +45,7 @@ public class CustomFunctionData {
     }
 
     private void a(Collection<CustomFunction> collection, MinecraftKey minecraftkey) {
-        this.server.getMethodProfiler().a(minecraftkey::toString);
+        //this.server.getMethodProfiler().a(minecraftkey::toString); // Akarin - remove caller
         Iterator iterator = collection.iterator();
 
         while (iterator.hasNext()) {
@@ -54,7 +54,7 @@ public class CustomFunctionData {
             this.a(customfunction, this.e());
         }
 
-        this.server.getMethodProfiler().exit();
+        //this.server.getMethodProfiler().exit(); // Akarin - remove caller
     }
 
     public int a(CustomFunction customfunction, CommandListenerWrapper commandlistenerwrapper) {
@@ -87,7 +87,7 @@ public class CustomFunctionData {
                     try {
                         CustomFunctionData.a customfunctiondata_a = (CustomFunctionData.a) this.e.removeFirst();
 
-                        this.server.getMethodProfiler().a(customfunctiondata_a::toString);
+                        //this.server.getMethodProfiler().a(customfunctiondata_a::toString); // Akarin - remove caller
                         customfunctiondata_a.a(this.e, i);
                         if (!this.f.isEmpty()) {
                             List list = Lists.reverse(this.f);
@@ -98,7 +98,7 @@ public class CustomFunctionData {
                             this.f.clear();
                         }
                     } finally {
-                        this.server.getMethodProfiler().exit();
+                        //this.server.getMethodProfiler().exit(); // Akarin - remove caller
                     }
 
                     ++k;
diff --git a/src/main/java/net/minecraft/server/Entity.java b/src/main/java/net/minecraft/server/Entity.java
index 3db19a9bab8ffdc42f280a27c867bf7d1a1ab9e7..f6ea12911e87ab081621910035bd713d4f11e584 100644
--- a/src/main/java/net/minecraft/server/Entity.java
+++ b/src/main/java/net/minecraft/server/Entity.java
@@ -465,7 +465,7 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke
     // CraftBukkit end
 
     public void entityBaseTick() {
-        this.world.getMethodProfiler().enter("entityBaseTick");
+        //this.world.getMethodProfiler().enter("entityBaseTick"); // Akarin - remove caller
         if (this.isPassenger() && this.getVehicle().dead) {
             this.stopRiding();
         }
@@ -523,7 +523,7 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke
         }
 
         this.justCreated = false;
-        this.world.getMethodProfiler().exit();
+        //this.world.getMethodProfiler().exit(); // Akarin - remove caller
     }
 
     // Paper start
@@ -679,7 +679,7 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke
                 }
             }
 
-            this.world.getMethodProfiler().enter("move");
+            //this.world.getMethodProfiler().enter("move"); // Akarin - remove caller
             if (this.x.g() > 1.0E-7D) {
                 vec3d = vec3d.h(this.x);
                 this.x = Vec3D.a;
@@ -688,7 +688,7 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke
             // Paper start - ignore movement changes while inactive.
             if (isTemporarilyActive && !(this instanceof EntityItem || this instanceof EntityMinecartAbstract) && vec3d == getMot() && enummovetype == EnumMoveType.SELF) {
                 setMot(Vec3D.a);
-                this.world.getMethodProfiler().exit();
+                //this.world.getMethodProfiler().exit(); // Akarin - remove caller
                 return;
             }
             // Paper end
@@ -701,8 +701,8 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke
                 this.recalcPosition();
             }
 
-            this.world.getMethodProfiler().exit();
-            this.world.getMethodProfiler().enter("rest");
+            //this.world.getMethodProfiler().exit(); // Akarin - remove caller
+            //this.world.getMethodProfiler().enter("rest"); // Akarin - remove caller
             this.positionChanged = !MathHelper.b(vec3d.x, vec3d1.x) || !MathHelper.b(vec3d.z, vec3d1.z);
             this.v = vec3d.y != vec3d1.y;
             this.onGround = this.v && vec3d.y < 0.0D;
@@ -809,7 +809,7 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke
                 this.setFireTicks(-this.getMaxFireTicks());
             }
 
-            this.world.getMethodProfiler().exit();
+            //this.world.getMethodProfiler().exit(); // Akarin - remove caller
         }
         // Tuinity start - detailed watchdog information
         } finally {
@@ -2376,7 +2376,7 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke
                 WorldServer worldserver1 = minecraftserver.getWorldServer(resourcekey);
 
                 if (true && !this.isPassenger() && this.portalTicks++ >= i) { // CraftBukkit
-                    this.world.getMethodProfiler().enter("portal");
+                    //this.world.getMethodProfiler().enter("portal"); // Akarin - remove caller
                     this.portalTicks = i;
                     this.portalCooldown = this.getDefaultPortalCooldown();
                     // CraftBukkit start
@@ -2386,7 +2386,7 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke
                         this.a(worldserver1);
                     }
                     // CraftBukkit end
-                    this.world.getMethodProfiler().exit();
+                    //this.world.getMethodProfiler().exit(); // Akarin - remove caller
                 }
 
                 this.inPortal = false;
@@ -2770,14 +2770,14 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke
         }
         // Paper end
         if (this.world instanceof WorldServer && !this.dead) {
-            this.world.getMethodProfiler().enter("changeDimension");
+            //this.world.getMethodProfiler().enter("changeDimension"); // Akarin - remove caller
             // CraftBukkit start
             // this.decouple();
             if (worldserver == null){
                 return null;
             }
             // CraftBukkit end
-            this.world.getMethodProfiler().enter("reposition");
+            //this.world.getMethodProfiler().enter("reposition"); // Akarin - remove caller
             Vec3D vec3d = this.getMot();
             float f = 0.0F;
             BlockPosition blockposition = location; // CraftBukkit
@@ -2856,7 +2856,7 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke
             this.decouple();
             // CraftBukkit end
 
-            this.world.getMethodProfiler().exitEnter("reloading");
+            //this.world.getMethodProfiler().exitEnter("reloading"); // Akarin - remove caller
             Entity entity = this.getEntityType().a((World) worldserver);
 
             if (entity != null) {
@@ -2878,10 +2878,10 @@ public abstract class Entity implements INamableTileEntity, ICommandListener, Ke
             }
 
             this.bJ();
-            this.world.getMethodProfiler().exit();
+            //this.world.getMethodProfiler().exit(); // Akarin - remove caller
             ((WorldServer) this.world).resetEmptyTime();
             worldserver.resetEmptyTime();
-            this.world.getMethodProfiler().exit();
+            //this.world.getMethodProfiler().exit(); // Akarin - remove caller
             return entity;
         } else {
             return null;
diff --git a/src/main/java/net/minecraft/server/EntityHoglin.java b/src/main/java/net/minecraft/server/EntityHoglin.java
index be8b07a7d79d192a132f407faf0a2f09ed42bfc4..97570b4521758a84c36e41f80653a17789ad4b60 100644
--- a/src/main/java/net/minecraft/server/EntityHoglin.java
+++ b/src/main/java/net/minecraft/server/EntityHoglin.java
@@ -83,9 +83,9 @@ public class EntityHoglin extends EntityAnimal implements IMonster, IOglin {
 
     @Override
     protected void mobTick() {
-        this.world.getMethodProfiler().enter("hoglinBrain");
+        //this.world.getMethodProfiler().enter("hoglinBrain"); // Akarin - remove caller
         this.getBehaviorController().a((WorldServer) this.world, this); // CraftBukkit - decompile error
-        this.world.getMethodProfiler().exit();
+        //this.world.getMethodProfiler().exit(); // Akarin - remove caller
         HoglinAI.a(this);
         if (this.eO()) {
             ++this.bz;
diff --git a/src/main/java/net/minecraft/server/EntityInsentient.java b/src/main/java/net/minecraft/server/EntityInsentient.java
index 605bbf0174e60f795e445193a0284739ea452946..027a55223c660f25b0b52f99efed5b0c037ae658 100644
--- a/src/main/java/net/minecraft/server/EntityInsentient.java
+++ b/src/main/java/net/minecraft/server/EntityInsentient.java
@@ -241,13 +241,13 @@ public abstract class EntityInsentient extends EntityLiving {
     @Override
     public void entityBaseTick() {
         super.entityBaseTick();
-        this.world.getMethodProfiler().enter("mobBaseTick");
+        //this.world.getMethodProfiler().enter("mobBaseTick"); // Akarin - remove caller
         if (this.isAlive() && this.random.nextInt(1000) < this.e++) {
             this.eJ();
             this.F();
         }
 
-        this.world.getMethodProfiler().exit();
+        //this.world.getMethodProfiler().exit(); // Akarin - remove caller
     }
 
     @Override
@@ -541,7 +541,7 @@ public abstract class EntityInsentient extends EntityLiving {
     @Override
     public void movementTick() {
         super.movementTick();
-        this.world.getMethodProfiler().enter("looting");
+        //this.world.getMethodProfiler().enter("looting"); // Akarin - remove caller
         if (!this.world.isClientSide && this.canPickupLoot() && this.isAlive() && !this.killed && this.world.getGameRules().getBoolean(GameRules.MOB_GRIEFING)) {
             List<EntityItem> list = this.world.a(EntityItem.class, this.getBoundingBox().grow(1.0D, 0.0D, 1.0D));
             Iterator iterator = list.iterator();
@@ -560,7 +560,7 @@ public abstract class EntityInsentient extends EntityLiving {
             }
         }
 
-        this.world.getMethodProfiler().exit();
+        //this.world.getMethodProfiler().exit(); // Akarin - remove caller
     }
 
     protected void b(EntityItem entityitem) {
@@ -747,30 +747,30 @@ public abstract class EntityInsentient extends EntityLiving {
             return;
         }
         // Paper end
-        this.world.getMethodProfiler().enter("sensing");
+        //this.world.getMethodProfiler().enter("sensing"); // Akarin - remove caller
         this.bv.a();
-        this.world.getMethodProfiler().exit();
-        this.world.getMethodProfiler().enter("targetSelector");
+        //this.world.getMethodProfiler().exit(); // Akarin - remove caller
+        //this.world.getMethodProfiler().enter("targetSelector"); // Akarin - remove caller
         this.targetSelector.doTick();
-        this.world.getMethodProfiler().exit();
-        this.world.getMethodProfiler().enter("goalSelector");
+        //this.world.getMethodProfiler().exit(); // Akarin - remove caller
+        //this.world.getMethodProfiler().enter("goalSelector"); // Akarin - remove caller
         this.goalSelector.doTick();
-        this.world.getMethodProfiler().exit();
-        this.world.getMethodProfiler().enter("navigation");
+        //this.world.getMethodProfiler().exit(); // Akarin - remove caller
+        //this.world.getMethodProfiler().enter("navigation"); // Akarin - remove caller
         this.navigation.c();
-        this.world.getMethodProfiler().exit();
-        this.world.getMethodProfiler().enter("mob tick");
+        //this.world.getMethodProfiler().exit(); // Akarin - remove caller
+        //this.world.getMethodProfiler().enter("mob tick"); // Akarin - remove caller
         this.mobTick();
-        this.world.getMethodProfiler().exit();
-        this.world.getMethodProfiler().enter("controls");
-        this.world.getMethodProfiler().enter("move");
+        //this.world.getMethodProfiler().exit(); // Akarin - remove caller
+        //this.world.getMethodProfiler().enter("controls"); // Akarin - remove caller
+        //this.world.getMethodProfiler().enter("move"); // Akarin - remove caller
         this.moveController.a();
-        this.world.getMethodProfiler().exitEnter("look");
+        //this.world.getMethodProfiler().exitEnter("look"); // Akarin - remove caller
         this.lookController.a();
-        this.world.getMethodProfiler().exitEnter("jump");
+        //this.world.getMethodProfiler().exitEnter("jump"); // Akarin - remove caller
         this.bp.b();
-        this.world.getMethodProfiler().exit();
-        this.world.getMethodProfiler().exit();
+        //this.world.getMethodProfiler().exit(); // Akarin - remove caller
+        //this.world.getMethodProfiler().exit(); // Akarin - remove caller
         this.M();
     }
 
diff --git a/src/main/java/net/minecraft/server/EntityLiving.java b/src/main/java/net/minecraft/server/EntityLiving.java
index 4545bd371c460d360a65d80b31af7819d718c97a..eef11ac58097cb84c3b3a47e4e33008a91c4f90e 100644
--- a/src/main/java/net/minecraft/server/EntityLiving.java
+++ b/src/main/java/net/minecraft/server/EntityLiving.java
@@ -263,7 +263,7 @@ public abstract class EntityLiving extends Entity {
         }
 
         super.entityBaseTick();
-        this.world.getMethodProfiler().enter("livingEntityBaseTick");
+        //this.world.getMethodProfiler().enter("livingEntityBaseTick"); // Akarin - remove caller
         boolean flag = this instanceof EntityHuman;
 
         if (this.isAlive()) {
@@ -365,7 +365,7 @@ public abstract class EntityLiving extends Entity {
         this.aK = this.aJ;
         this.lastYaw = this.yaw;
         this.lastPitch = this.pitch;
-        this.world.getMethodProfiler().exit();
+        //this.world.getMethodProfiler().exit(); // Akarin - remove caller
     }
 
     public boolean cM() {
@@ -2497,10 +2497,10 @@ public abstract class EntityLiving extends Entity {
         }
 
         this.aR += (f3 - this.aR) * 0.3F;
-        this.world.getMethodProfiler().enter("headTurn");
+        //this.world.getMethodProfiler().enter("headTurn"); // Akarin - remove caller
         f2 = this.f(f1, f2);
-        this.world.getMethodProfiler().exit();
-        this.world.getMethodProfiler().enter("rangeChecks");
+        //this.world.getMethodProfiler().exit(); // Akarin - remove caller
+        //this.world.getMethodProfiler().enter("rangeChecks"); // Akarin - remove caller
 
         while (this.yaw - this.lastYaw < -180.0F) {
             this.lastYaw -= 360.0F;
@@ -2534,7 +2534,7 @@ public abstract class EntityLiving extends Entity {
             this.aK += 360.0F;
         }
 
-        this.world.getMethodProfiler().exit();
+        //this.world.getMethodProfiler().exit(); // Akarin - remove caller
         this.aS += f2;
         if (this.isGliding()) {
             ++this.bl;
@@ -2733,19 +2733,19 @@ public abstract class EntityLiving extends Entity {
         }
 
         this.setMot(d4, d5, d6);
-        this.world.getMethodProfiler().enter("ai");
+        //this.world.getMethodProfiler().enter("ai"); // Akarin - remove caller
         if (this.isFrozen()) {
             this.jumping = false;
             this.aY = 0.0F;
             this.ba = 0.0F;
         } else if (this.doAITick()) {
-            this.world.getMethodProfiler().enter("newAi");
+            //this.world.getMethodProfiler().enter("newAi"); // Akarin - remove caller
             this.doTick();
-            this.world.getMethodProfiler().exit();
+            //this.world.getMethodProfiler().exit(); // Akarin - remove caller
         }
 
-        this.world.getMethodProfiler().exit();
-        this.world.getMethodProfiler().enter("jump");
+        //this.world.getMethodProfiler().exit(); // Akarin - remove caller
+        //this.world.getMethodProfiler().enter("jump"); // Akarin - remove caller
         if (this.jumping && this.cS()) {
             double d7;
 
@@ -2772,23 +2772,23 @@ public abstract class EntityLiving extends Entity {
             this.jumpTicks = 0;
         }
 
-        this.world.getMethodProfiler().exit();
-        this.world.getMethodProfiler().enter("travel");
+        //this.world.getMethodProfiler().exit(); // Akarin - remove caller
+        //this.world.getMethodProfiler().enter("travel"); // Akarin - remove caller
         this.aY *= 0.98F;
         this.ba *= 0.98F;
         this.t();
         AxisAlignedBB axisalignedbb = this.getBoundingBox();
 
         this.f(new Vec3D((double) this.aY, (double) this.aZ, (double) this.ba));
-        this.world.getMethodProfiler().exit();
-        this.world.getMethodProfiler().enter("push");
+        //this.world.getMethodProfiler().exit(); // Akarin - remove caller
+        //this.world.getMethodProfiler().enter("push"); // Akarin - remove caller
         if (this.bm > 0) {
             --this.bm;
             this.a(axisalignedbb, this.getBoundingBox());
         }
 
         this.collideNearby();
-        this.world.getMethodProfiler().exit();
+        //this.world.getMethodProfiler().exit(); // Akarin - remove caller
         if (!this.world.isClientSide && this.dN() && this.aC()) {
             this.damageEntity(DamageSource.DROWN, 1.0F);
         }
diff --git a/src/main/java/net/minecraft/server/EntityPiglin.java b/src/main/java/net/minecraft/server/EntityPiglin.java
index 63fa1581ebe1698c09635807998c675fe117fe7b..26b546afd919fa70bae4947e120e1ecdc8345f42 100644
--- a/src/main/java/net/minecraft/server/EntityPiglin.java
+++ b/src/main/java/net/minecraft/server/EntityPiglin.java
@@ -235,9 +235,9 @@ public class EntityPiglin extends EntityMonster implements ICrossbow {
 
     @Override
     protected void mobTick() {
-        this.world.getMethodProfiler().enter("piglinBrain");
+        //this.world.getMethodProfiler().enter("piglinBrain"); // Akarin - remove caller
         this.getBehaviorController().a((WorldServer) this.world, this); // CraftBukkit - decompile error
-        this.world.getMethodProfiler().exit();
+        //this.world.getMethodProfiler().exit(); // Akarin - remove caller
         PiglinAI.b(this);
         if (this.eO()) {
             ++this.bA;
diff --git a/src/main/java/net/minecraft/server/EntityPlayer.java b/src/main/java/net/minecraft/server/EntityPlayer.java
index 8fd3c913ac5315a5c1cce002498bfe2ec08aaf42..6ea4178508b059cfb8c35d28849b088627b118c2 100644
--- a/src/main/java/net/minecraft/server/EntityPlayer.java
+++ b/src/main/java/net/minecraft/server/EntityPlayer.java
@@ -900,7 +900,7 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
             float f1 = this.yaw;
             float f2 = f1;
 
-            worldserver1.getMethodProfiler().enter("moving");
+            //worldserver1.getMethodProfiler().enter("moving"); // Akarin - remove caller
             double d3;
 
             if (worldserver == null) { } else // CraftBukkit - empty to fall through to null to event
@@ -951,8 +951,8 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
             // CraftBukkit end
 
             // this.setPositionRotation(d0, d1, d2, f1, f); // CraftBukkit - PlayerTeleportEvent handles position changes
-            worldserver1.getMethodProfiler().exit();
-            worldserver1.getMethodProfiler().enter("placing");
+            //worldserver1.getMethodProfiler().exit(); // Akarin - remove caller
+            //worldserver1.getMethodProfiler().enter("placing"); // Akarin - remove caller
             // Spigot start - SPIGOT-5677, MC-114796: Fix portals generating outside world border
             double d4 = Math.max(-2.9999872E7D, worldserver.getWorldBorder().e() + 16.0D);
 
@@ -1001,7 +1001,7 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
                 // CraftBukkit end
             }
 
-            worldserver1.getMethodProfiler().exit();
+            //worldserver1.getMethodProfiler().exit(); // Akarin - remove caller
             // CraftBukkit start - PlayerTeleportEvent
             PlayerTeleportEvent tpEvent = new PlayerTeleportEvent(this.getBukkitEntity(), enter, exit, cause);
             Bukkit.getServer().getPluginManager().callEvent(tpEvent);
diff --git a/src/main/java/net/minecraft/server/EntityVillager.java b/src/main/java/net/minecraft/server/EntityVillager.java
index bf019043a9338aca8d91da809f1d5520531386e7..bef12b50bd37fcfef5c8a417bd776a8684df83fa 100644
--- a/src/main/java/net/minecraft/server/EntityVillager.java
+++ b/src/main/java/net/minecraft/server/EntityVillager.java
@@ -165,7 +165,7 @@ public class EntityVillager extends EntityVillagerAbstract implements Reputation
     @Override
     protected void mobTick() { mobTick(false); }
     protected void mobTick(boolean inactive) {
-        this.world.getMethodProfiler().enter("villagerBrain");
+        //this.world.getMethodProfiler().enter("villagerBrain"); // Akarin - remove caller
         if (!inactive) this.getBehaviorController().a((WorldServer) this.world, this); // CraftBukkit - decompile error // Paper
         if (this.bM) {
             this.bM = false;
diff --git a/src/main/java/net/minecraft/server/Explosion.java b/src/main/java/net/minecraft/server/Explosion.java
index e408ec8c645e9ceb278a13a5b0de8ecf57f3929e..a0b47a4f1d095e609ea32a2a2810745beae06ebe 100644
--- a/src/main/java/net/minecraft/server/Explosion.java
+++ b/src/main/java/net/minecraft/server/Explosion.java
@@ -281,7 +281,7 @@ public class Explosion {
                 if (!iblockdata.isAir() && iblockdata.isDestroyable()) { // Paper
                     BlockPosition blockposition1 = blockposition.immutableCopy();
 
-                    this.world.getMethodProfiler().enter("explosion_blocks");
+                    //this.world.getMethodProfiler().enter("explosion_blocks"); // Akarin - remove caller
                     if (block.a(this) && this.world instanceof WorldServer) {
                         TileEntity tileentity = block.isTileEntity() ? this.world.getTileEntity(blockposition) : null;
                         LootTableInfo.Builder loottableinfo_builder = (new LootTableInfo.Builder((WorldServer) this.world)).a(this.world.random).set(LootContextParameters.POSITION, blockposition).set(LootContextParameters.TOOL, ItemStack.b).setOptional(LootContextParameters.BLOCK_ENTITY, tileentity).setOptional(LootContextParameters.THIS_ENTITY, this.source);
@@ -297,7 +297,7 @@ public class Explosion {
 
                     this.world.setTypeAndData(blockposition, Blocks.AIR.getBlockData(), 3);
                     block.wasExploded(this.world, blockposition, this);
-                    this.world.getMethodProfiler().exit();
+                    //this.world.getMethodProfiler().exit(); // Akarin - remove caller
                 }
             }
 
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 469db917dd8c5057a13b1ba021de24cb2907e520..1ee6ac550faade121d7fe9b08d713b3e9ac4e477 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -995,15 +995,15 @@ public abstract class MinecraftServer extends IAsyncTaskHandlerReentrant<TickTas
                     GameProfilerTick gameprofilertick = GameProfilerTick.a("Server");
 
                     this.a(gameprofilertick);
-                    this.methodProfiler.a();
-                    this.methodProfiler.enter("tick");
+                    //this.methodProfiler.a(); // Akarin - remove caller
+                    //this.methodProfiler.enter("tick"); // Akarin - remove caller
                     this.a(this::canSleepForTick);
-                    this.methodProfiler.exitEnter("nextTickWait");
+                    //this.methodProfiler.exitEnter("nextTickWait"); // Akarin - remove caller
                     this.X = true;
                     this.W = Math.max(SystemUtils.getMonotonicMillis() + 50L, this.nextTick);
                     this.sleepForTick();
-                    this.methodProfiler.exit();
-                    this.methodProfiler.b();
+                    //this.methodProfiler.exit(); // Akarin - remove caller
+                    //this.methodProfiler.b(); // Akarin - remove caller
                     this.b(gameprofilertick);
                     this.hasTicked = true;
                 }
@@ -1209,7 +1209,7 @@ public abstract class MinecraftServer extends IAsyncTaskHandlerReentrant<TickTas
     }
 
     protected void c(TickTask ticktask) {
-        this.getMethodProfiler().c("runTask");
+        //this.getMethodProfiler().c("runTask"); // Akarin - remove caller
         super.executeTask(ticktask);
     }
 
@@ -1283,7 +1283,7 @@ public abstract class MinecraftServer extends IAsyncTaskHandlerReentrant<TickTas
         //if (autosavePeriod > 0 && this.ticks % autosavePeriod == 0) { // CraftBukkit // Paper - move down
             //MinecraftServer.LOGGER.debug("Autosave started"); // Paper
             serverAutoSave = (autosavePeriod > 0 && this.ticks % autosavePeriod == 0); // Paper
-            this.methodProfiler.enter("save");
+            //this.methodProfiler.enter("save"); // Akarin - remove caller
             if (autosavePeriod > 0 && this.ticks % autosavePeriod == 0) { // Paper
             this.playerList.savePlayers();
             }// Paper
@@ -1295,11 +1295,11 @@ public abstract class MinecraftServer extends IAsyncTaskHandlerReentrant<TickTas
             }
             // Paper end
 
-            this.methodProfiler.exit();
+            //this.methodProfiler.exit(); // Akarin - remove caller
             //MinecraftServer.LOGGER.debug("Autosave finished"); // Paper
         //} // Paper
 
-        this.methodProfiler.enter("snooper");
+        //this.methodProfiler.enter("snooper"); // Akarin - remove caller
         // Akarin - Disable Snooper
         /*
         if (((DedicatedServer) this).getDedicatedServerProperties().snooperEnabled && !this.snooper.d() && this.ticks > 100) { // Spigot
@@ -1311,7 +1311,7 @@ public abstract class MinecraftServer extends IAsyncTaskHandlerReentrant<TickTas
         }
         */
 
-        this.methodProfiler.exit();
+        //this.methodProfiler.exit(); // Akarin - remove caller
 
         // Paper start - move executeAll() into full server tick timing
         try (co.aikar.timings.Timing ignored = MinecraftTimings.processTasksTimer.startTiming()) {
@@ -1327,7 +1327,7 @@ public abstract class MinecraftServer extends IAsyncTaskHandlerReentrant<TickTas
         new com.destroystokyo.paper.event.server.ServerTickEndEvent(this.ticks, ((double)(endTime - lastTick) / 1000000D), remaining).callEvent();
         // Paper end
 
-        this.methodProfiler.enter("tallying");
+        //this.methodProfiler.enter("tallying"); // Akarin - remove caller
         long l = this.h[this.ticks % 100] = SystemUtils.getMonotonicNanos() - i;
 
         this.ag = this.ag * 0.8F + (float) l / 1000000.0F * 0.19999999F;
@@ -1340,7 +1340,7 @@ public abstract class MinecraftServer extends IAsyncTaskHandlerReentrant<TickTas
         // Paper end
 
         this.circularTimer.a(i1 - i);
-        this.methodProfiler.exit();
+        //this.methodProfiler.exit(); // Akarin - remove caller
         org.spigotmc.WatchdogThread.tick(); // Spigot
         this.slackActivityAccountant.tickEnded(l); // Spigot
         co.aikar.timings.TimingsManager.FULL_SERVER_TICK.stopTiming(); // Paper
@@ -1352,12 +1352,12 @@ public abstract class MinecraftServer extends IAsyncTaskHandlerReentrant<TickTas
         this.server.getScheduler().mainThreadHeartbeat(this.ticks); // CraftBukkit
         MinecraftTimings.bukkitSchedulerTimer.stopTiming(); // Spigot // Paper
         // Tuinity - replace logic
-        this.methodProfiler.enter("commandFunctions");
+        //this.methodProfiler.enter("commandFunctions"); // Akarin - remove caller
         MinecraftTimings.commandFunctionsTimer.startTiming(); // Spigot // Paper
         this.getFunctionData().tick();
         MinecraftTimings.commandFunctionsTimer.stopTiming(); // Spigot // Paper
         // Tuinity - replace logic
-        this.methodProfiler.exitEnter("levels");
+        //this.methodProfiler.exitEnter("levels"); // Akarin - remove caller
         Iterator iterator = this.getWorlds().iterator();
 
         // CraftBukkit start
@@ -1400,13 +1400,13 @@ public abstract class MinecraftServer extends IAsyncTaskHandlerReentrant<TickTas
             });
             /* Drop global time updates
             if (this.ticks % 20 == 0) {
-                this.methodProfiler.enter("timeSync");
+                //this.methodProfiler.enter("timeSync"); // Akarin - remove caller
                 this.playerList.a((Packet) (new PacketPlayOutUpdateTime(worldserver.getTime(), worldserver.getDayTime(), worldserver.getGameRules().getBoolean(GameRules.DO_DAYLIGHT_CYCLE))), worldserver.getDimensionKey());
-                this.methodProfiler.exit();
+                //this.methodProfiler.exit(); // Akarin - remove caller
             }
             // CraftBukkit end */
 
-            this.methodProfiler.enter("tick");
+            //this.methodProfiler.enter("tick"); // Akarin - remove caller
 
             try {
                 // Tuinity - replace logic
@@ -1429,16 +1429,16 @@ public abstract class MinecraftServer extends IAsyncTaskHandlerReentrant<TickTas
                 throw new ReportedException(crashreport);
             }
 
-            this.methodProfiler.exit();
-            this.methodProfiler.exit();
+            //this.methodProfiler.exit(); // Akarin - remove caller
+            //this.methodProfiler.exit(); // Akarin - remove caller
             worldserver.explosionDensityCache.clear(); // Paper - Optimize explosions
         }
 
-        this.methodProfiler.exitEnter("connection");
+        //this.methodProfiler.exitEnter("connection"); // Akarin - remove caller
         MinecraftTimings.connectionTimer.startTiming(); // Spigot
         this.getServerConnection().c();
         MinecraftTimings.connectionTimer.stopTiming(); // Spigot
-        this.methodProfiler.exitEnter("players");
+        //this.methodProfiler.exitEnter("players"); // Akarin - remove caller
         MinecraftTimings.playerListTimer.startTiming(); // Spigot // Paper
         this.playerList.tick();
         MinecraftTimings.playerListTimer.stopTiming(); // Spigot // Paper
@@ -1446,7 +1446,7 @@ public abstract class MinecraftServer extends IAsyncTaskHandlerReentrant<TickTas
             GameTestHarnessTicker.a.b();
         }
 
-        this.methodProfiler.exitEnter("server gui refresh");
+        //this.methodProfiler.exitEnter("server gui refresh"); // Akarin - remove caller
 
         MinecraftTimings.tickablesTimer.startTiming(); // Spigot // Paper
         for (int i = 0; i < this.tickables.size(); ++i) {
@@ -1454,7 +1454,7 @@ public abstract class MinecraftServer extends IAsyncTaskHandlerReentrant<TickTas
         }
         MinecraftTimings.tickablesTimer.stopTiming(); // Spigot // Paper
 
-        this.methodProfiler.exit();
+        //this.methodProfiler.exit(); // Akarin - remove caller
     }
 
     public boolean getAllowNether() {
diff --git a/src/main/java/net/minecraft/server/NavigationAbstract.java b/src/main/java/net/minecraft/server/NavigationAbstract.java
index e6dc5b9ce1b2f844d84a7cdf9bce030bc8eb568d..600c506ea7dc32f62d2acd391918679818992a1d 100644
--- a/src/main/java/net/minecraft/server/NavigationAbstract.java
+++ b/src/main/java/net/minecraft/server/NavigationAbstract.java
@@ -140,14 +140,14 @@ public abstract class NavigationAbstract {
                 }
             }
             // Paper end
-            this.b.getMethodProfiler().enter("pathfind");
+            //this.b.getMethodProfiler().enter("pathfind"); // Akarin - remove caller
             float f = (float) this.a.b(GenericAttributes.FOLLOW_RANGE);
             BlockPosition blockposition = flag ? this.a.getChunkCoordinates().up() : this.a.getChunkCoordinates();
             int k = (int) (f + (float) i);
             ChunkCache chunkcache = new ChunkCache(this.b, blockposition.b(-k, -k, -k), blockposition.b(k, k, k));
             PathEntity pathentity = this.s.a(chunkcache, this.a, set, f, j, this.r);
 
-            this.b.getMethodProfiler().exit();
+            //this.b.getMethodProfiler().exit(); // Akarin - remove caller
             if (pathentity != null && pathentity.m() != null) {
                 this.p = pathentity.m();
                 this.q = j;
diff --git a/src/main/java/net/minecraft/server/PathfinderGoalSelector.java b/src/main/java/net/minecraft/server/PathfinderGoalSelector.java
index d3f0327a2a7cdedf3fe8d10df981a9f1cb378d26..81df1cf34db8a1477bd394acd4e10b0da197c595 100644
--- a/src/main/java/net/minecraft/server/PathfinderGoalSelector.java
+++ b/src/main/java/net/minecraft/server/PathfinderGoalSelector.java
@@ -81,7 +81,7 @@ public class PathfinderGoalSelector {
     public void doTick() {
         GameProfilerFiller gameprofilerfiller = (GameProfilerFiller) this.e.get();
 
-        gameprofilerfiller.enter("goalCleanup");
+        //gameprofilerfiller.enter("goalCleanup"); // Akarin - remove caller
         // Paper start - remove streams from pathfindergoalselector
         for (Iterator<PathfinderGoalWrapped> iterator = this.d.iterator(); iterator.hasNext();) {
             PathfinderGoalWrapped wrappedGoal = iterator.next();
@@ -100,8 +100,8 @@ public class PathfinderGoalSelector {
             }
 
         });
-        gameprofilerfiller.exit();
-        gameprofilerfiller.enter("goalUpdate");
+        //gameprofilerfiller.exit(); // Akarin - remove caller
+        //gameprofilerfiller.enter("goalUpdate"); // Akarin - remove caller
         // Paper start - remove streams from pathfindergoalselector
         goal_update_loop: for (Iterator<PathfinderGoalWrapped> iterator = this.d.iterator(); iterator.hasNext();) {
             PathfinderGoalWrapped wrappedGoal = iterator.next();
@@ -144,8 +144,8 @@ public class PathfinderGoalSelector {
             wrappedGoal.c();
         }
         // Paper end - remove streams from pathfindergoalselector
-        gameprofilerfiller.exit();
-        gameprofilerfiller.enter("goalTick");
+        //gameprofilerfiller.exit(); // Akarin - remove caller
+        //gameprofilerfiller.enter("goalTick"); // Akarin - remove caller
         // Paper start - remove streams from pathfindergoalselector
         for (Iterator<PathfinderGoalWrapped> iterator = this.d.iterator(); iterator.hasNext();) {
             PathfinderGoalWrapped wrappedGoal = iterator.next();
@@ -154,7 +154,7 @@ public class PathfinderGoalSelector {
             }
         }
         // Paper end - remove streams from pathfindergoalselector
-        gameprofilerfiller.exit();
+        //gameprofilerfiller.exit(); // Akarin - remove caller
     }
 
     public final Stream<PathfinderGoalWrapped> getExecutingGoals() { return d(); } // Paper - OBFHELPER
diff --git a/src/main/java/net/minecraft/server/PlayerChunkMap.java b/src/main/java/net/minecraft/server/PlayerChunkMap.java
index 4dd6f48caf552345a606576a476bac6ff3249a9b..44040c4dab5d662d6508df25fe8a693e2771186f 100644
--- a/src/main/java/net/minecraft/server/PlayerChunkMap.java
+++ b/src/main/java/net/minecraft/server/PlayerChunkMap.java
@@ -900,17 +900,17 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {
         GameProfilerFiller gameprofilerfiller = this.world.getMethodProfiler();
 
         try (Timing ignored = this.world.timings.poiUnload.startTiming()) { // Paper
-        gameprofilerfiller.enter("poi");
+        //gameprofilerfiller.enter("poi"); // Akarin - remove caller
         this.m.a(booleansupplier);
         } // Paper
-        gameprofilerfiller.exitEnter("chunk_unload");
+        //gameprofilerfiller.exitEnter("chunk_unload"); // Akarin - remove caller
         if (!this.world.isSavingDisabled()) {
             try (Timing ignored = this.world.timings.chunkUnload.startTiming()) { // Paper
             this.b(booleansupplier);
             }// Paper
         }
 
-        gameprofilerfiller.exit();
+        //gameprofilerfiller.exit(); // Akarin - remove caller
     }
 
     private void b(BooleanSupplier booleansupplier) {
@@ -1117,7 +1117,7 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {
         // Paper start - Async chunk io
         final java.util.function.BiFunction<ChunkRegionLoader.InProgressChunkHolder, Throwable, Either<IChunkAccess, PlayerChunk.Failure>> syncLoadComplete = (chunkHolder, ioThrowable) -> {
             try (Timing ignored = this.world.timings.chunkLoad.startTimingIfSync()) { // Paper
-                this.world.getMethodProfiler().c("chunkLoad");
+                //this.world.getMethodProfiler().c("chunkLoad"); // Akarin - remove caller
                 // Paper start
                 if (ioThrowable != null) {
                     com.destroystokyo.paper.util.SneakyThrow.sneaky(ioThrowable);
@@ -1441,7 +1441,7 @@ public class PlayerChunkMap extends IChunkLoader implements PlayerChunk.d {
                     } // Paper
                 }
 
-                this.world.getMethodProfiler().c("chunkSave");
+                //this.world.getMethodProfiler().c("chunkSave"); // Akarin - remove caller
                 NBTTagCompound nbttagcompound;
                 try (co.aikar.timings.Timing ignored1 = this.world.timings.chunkSaveDataSerialization.startTiming()) { // Paper
                     nbttagcompound = ChunkRegionLoader.saveChunk(this.world, ichunkaccess);
diff --git a/src/main/java/net/minecraft/server/PlayerConnection.java b/src/main/java/net/minecraft/server/PlayerConnection.java
index 37f55c66b6cbca9650b050fe08f60c101c2d35bf..6c13288d7f1379c23f4802295795053d9120d001 100644
--- a/src/main/java/net/minecraft/server/PlayerConnection.java
+++ b/src/main/java/net/minecraft/server/PlayerConnection.java
@@ -195,7 +195,7 @@ public class PlayerConnection implements PacketListenerPlayIn {
             this.E = 0;
         }} // Paper - end if (valid)
 
-        this.minecraftServer.getMethodProfiler().enter("keepAlive");
+        //this.minecraftServer.getMethodProfiler().enter("keepAlive"); // Akarin - remove caller
         // Paper Start - give clients a longer time to respond to pings as per pre 1.12.2 timings
         // This should effectively place the keepalive handling back to "as it was" before 1.12.2
         long currentTime = SystemUtils.getMonotonicMillis();
@@ -216,7 +216,7 @@ public class PlayerConnection implements PacketListenerPlayIn {
         }
         // Paper end
 
-        this.minecraftServer.getMethodProfiler().exit();
+        //this.minecraftServer.getMethodProfiler().exit(); // Akarin - remove caller
         // CraftBukkit start
         for (int spam; (spam = this.chatThrottle) > 0 && !chatSpamField.compareAndSet(this, spam, spam - 1); ) ;
         if (tabSpamLimiter.get() > 0) tabSpamLimiter.getAndDecrement(); // Paper - split to seperate variable
diff --git a/src/main/java/net/minecraft/server/SpawnerCreature.java b/src/main/java/net/minecraft/server/SpawnerCreature.java
index c5845013a79036704d084cfb903589cb9e8767cd..c9c779acea482a87eee2628f552bc69227c00cbc 100644
--- a/src/main/java/net/minecraft/server/SpawnerCreature.java
+++ b/src/main/java/net/minecraft/server/SpawnerCreature.java
@@ -89,7 +89,7 @@ public final class SpawnerCreature {
     }
 
     public static void a(WorldServer worldserver, Chunk chunk, SpawnerCreature.d spawnercreature_d, boolean flag, boolean flag1, boolean flag2) {
-        worldserver.getMethodProfiler().enter("spawner");
+        //worldserver.getMethodProfiler().enter("spawner"); // Akarin - remove caller
         worldserver.timings.mobSpawn.startTiming(); // Spigot
         EnumCreatureType[] aenumcreaturetype = SpawnerCreature.c;
         int i = aenumcreaturetype.length;
@@ -166,7 +166,7 @@ public final class SpawnerCreature {
         }
 
         worldserver.timings.mobSpawn.stopTiming(); // Spigot
-        worldserver.getMethodProfiler().exit();
+        //worldserver.getMethodProfiler().exit(); // Akarin - remove caller
     }
 
     public static void a(EnumCreatureType enumcreaturetype, WorldServer worldserver, Chunk chunk, SpawnerCreature.c spawnercreature_c, SpawnerCreature.a spawnercreature_a) {
diff --git a/src/main/java/net/minecraft/server/TickListServer.java b/src/main/java/net/minecraft/server/TickListServer.java
index 149d2b4f929c11b8baf17163bbd6ff8220a95e86..1784c635dba61428bd62c0d2311770a9febdc1d3 100644
--- a/src/main/java/net/minecraft/server/TickListServer.java
+++ b/src/main/java/net/minecraft/server/TickListServer.java
@@ -62,7 +62,7 @@ public class TickListServer<T> implements TickList<T> {
             ChunkProviderServer chunkproviderserver = this.e.getChunkProvider();
             Iterator<NextTickListEntry<T>> iterator = this.nextTickList.iterator();
 
-            this.e.getMethodProfiler().enter("cleaning");
+            //this.e.getMethodProfiler().enter("cleaning"); // Akarin - remove caller
 
             this.timingCleanup.startTiming(); // Paper
             NextTickListEntry nextticklistentry;
@@ -83,7 +83,7 @@ public class TickListServer<T> implements TickList<T> {
             this.timingCleanup.stopTiming(); // Paper
 
             this.timingTicking.startTiming(); // Paper
-            this.e.getMethodProfiler().exitEnter("ticking");
+            //this.e.getMethodProfiler().exitEnter("ticking"); // Akarin - remove caller
 
             while ((nextticklistentry = (NextTickListEntry) this.f.poll()) != null) {
                 if (chunkproviderserver.a(nextticklistentry.a)) {
@@ -103,7 +103,7 @@ public class TickListServer<T> implements TickList<T> {
             }
 
             this.timingTicking.stopTiming(); // Paper
-            this.e.getMethodProfiler().exit();
+            //this.e.getMethodProfiler().exit(); // Akarin - remove caller
             this.g.clear();
             this.f.clear();
         }
diff --git a/src/main/java/net/minecraft/server/World.java b/src/main/java/net/minecraft/server/World.java
index d1f3de21b0c54fa83484d3342489331fc94294d7..55dc986ea37ef90ee9eca624954adb0add93c56b 100644
--- a/src/main/java/net/minecraft/server/World.java
+++ b/src/main/java/net/minecraft/server/World.java
@@ -480,9 +480,9 @@ public abstract class World implements GeneratorAccess, AutoCloseable {
                 IBlockData iblockdata2 = this.getType(blockposition);
 
                 if (iblockdata2 != iblockdata1 && (iblockdata2.b((IBlockAccess) this, blockposition) != iblockdata1.b((IBlockAccess) this, blockposition) || iblockdata2.f() != iblockdata1.f() || iblockdata2.e() || iblockdata1.e())) {
-                    this.getMethodProfiler().enter("queueCheckLight");
+                    //this.getMethodProfiler().enter("queueCheckLight"); // Akarin - remove caller
                     this.getChunkProvider().getLightEngine().a(blockposition);
-                    this.getMethodProfiler().exit();
+                    //this.getMethodProfiler().exit(); // Akarin - remove caller
                 }
 
                 /*
@@ -841,7 +841,7 @@ public abstract class World implements GeneratorAccess, AutoCloseable {
     public void tickBlockEntities() {
         GameProfilerFiller gameprofilerfiller = this.getMethodProfiler();
 
-        gameprofilerfiller.enter("blockEntities");
+        //gameprofilerfiller.enter("blockEntities"); // Akarin - remove caller
         timings.tileEntityTick.startTiming(); // Spigot
         if (!this.tileEntityListUnload.isEmpty()) {
             // Paper start - Use alternate implementation with faster contains
@@ -884,7 +884,7 @@ public abstract class World implements GeneratorAccess, AutoCloseable {
                             tileentity.w();
                         }
 
-                        gameprofilerfiller.exit();
+                        //gameprofilerfiller.exit(); // Akarin - remove caller
                     } catch (Throwable throwable) {
                         if (throwable instanceof ThreadDeath) throw throwable; // Paper
                         // Paper start - Prevent tile entity and entity crashes
@@ -921,7 +921,7 @@ public abstract class World implements GeneratorAccess, AutoCloseable {
         timings.tileEntityTick.stopTiming(); // Spigot
         timings.tileEntityPending.startTiming(); // Spigot
         this.tickingTileEntities = false;
-        gameprofilerfiller.exitEnter("pendingBlockEntities");
+        //gameprofilerfiller.exitEnter("pendingBlockEntities"); // Akarin - remove caller
         if (!this.tileEntityListPending.isEmpty()) {
             for (int i = 0; i < this.tileEntityListPending.size(); ++i) {
                 TileEntity tileentity1 = (TileEntity) this.tileEntityListPending.get(i);
@@ -954,7 +954,7 @@ public abstract class World implements GeneratorAccess, AutoCloseable {
 
         timings.tileEntityPending.stopTiming(); // Spigot
         co.aikar.timings.TimingHistory.tileEntityTicks += this.tileEntityListTick.size(); // Paper
-        gameprofilerfiller.exit();
+        //gameprofilerfiller.exit(); // Akarin - remove caller
         spigotConfig.currentPrimedTnt = 0; // Spigot
     }
 
@@ -1191,7 +1191,7 @@ public abstract class World implements GeneratorAccess, AutoCloseable {
     }
     public List<Entity> getEntities(@Nullable Entity entity, AxisAlignedBB axisalignedbb, @Nullable Predicate<? super Entity> predicate, List<Entity> list) {
         // Tuinity end - add list parameter
-        this.getMethodProfiler().c("getEntities");
+        //this.getMethodProfiler().c("getEntities"); // Akarin - remove caller
         int i = MathHelper.floor((axisalignedbb.minX - 2.0D) / 16.0D);
         int j = MathHelper.floor((axisalignedbb.maxX + 2.0D) / 16.0D);
         int k = MathHelper.floor((axisalignedbb.minZ - 2.0D) / 16.0D);
@@ -1212,7 +1212,7 @@ public abstract class World implements GeneratorAccess, AutoCloseable {
     }
 
     public <T extends Entity> List<T> a(@Nullable EntityTypes<T> entitytypes, AxisAlignedBB axisalignedbb, Predicate<? super T> predicate) {
-        this.getMethodProfiler().c("getEntities");
+        //this.getMethodProfiler().c("getEntities"); // Akarin - remove caller
         int i = MathHelper.floor((axisalignedbb.minX - 2.0D) / 16.0D);
         int j = MathHelper.f((axisalignedbb.maxX + 2.0D) / 16.0D);
         int k = MathHelper.floor((axisalignedbb.minZ - 2.0D) / 16.0D);
@@ -1234,7 +1234,7 @@ public abstract class World implements GeneratorAccess, AutoCloseable {
 
     public <T extends Entity> List<T> getEntities(Class<? extends T> oclass, AxisAlignedBB axisalignedbb, @Nullable Predicate<? super T> predicate) { return a(oclass, axisalignedbb, predicate); } // Paper - OBFHELPER
     @Override public <T extends Entity> List<T> a(Class<? extends T> oclass, AxisAlignedBB axisalignedbb, @Nullable Predicate<? super T> predicate) {
-        this.getMethodProfiler().c("getEntities");
+        //this.getMethodProfiler().c("getEntities"); // Akarin - remove caller
         int i = MathHelper.floor((axisalignedbb.minX - 2.0D) / 16.0D);
         int j = MathHelper.f((axisalignedbb.maxX + 2.0D) / 16.0D);
         int k = MathHelper.floor((axisalignedbb.minZ - 2.0D) / 16.0D);
@@ -1257,7 +1257,7 @@ public abstract class World implements GeneratorAccess, AutoCloseable {
 
     @Override
     public <T extends Entity> List<T> b(Class<? extends T> oclass, AxisAlignedBB axisalignedbb, @Nullable Predicate<? super T> predicate) {
-        this.getMethodProfiler().c("getLoadedEntities");
+        //this.getMethodProfiler().c("getLoadedEntities"); // Akarin - remove caller
         int i = MathHelper.floor((axisalignedbb.minX - 2.0D) / 16.0D);
         int j = MathHelper.f((axisalignedbb.maxX + 2.0D) / 16.0D);
         int k = MathHelper.floor((axisalignedbb.minZ - 2.0D) / 16.0D);
diff --git a/src/main/java/net/minecraft/server/WorldServer.java b/src/main/java/net/minecraft/server/WorldServer.java
index fff694c3701e582010b1557650e5296dfdfaf961..41a366cf79a33844702f8da22797c7bb02a427ef 100644
--- a/src/main/java/net/minecraft/server/WorldServer.java
+++ b/src/main/java/net/minecraft/server/WorldServer.java
@@ -752,9 +752,9 @@ public class WorldServer extends World implements GeneratorAccessSeed {
         GameProfilerFiller gameprofilerfiller = this.getMethodProfiler();
 
         this.ticking = true;
-        gameprofilerfiller.enter("world border");
+        //gameprofilerfiller.enter("world border"); // Akarin - remove caller
         this.getWorldBorder().s();
-        gameprofilerfiller.exitEnter("weather");
+        //gameprofilerfiller.exitEnter("weather"); // Akarin - remove caller
         boolean flag = this.isRaining();
 
         if (this.getDimensionManager().hasSkyLight()) {
@@ -887,11 +887,11 @@ public class WorldServer extends World implements GeneratorAccessSeed {
 
         this.N();
         this.b();
-        gameprofilerfiller.exitEnter("chunkSource");
+        //gameprofilerfiller.exitEnter("chunkSource"); // Akarin - remove caller
         this.timings.chunkProviderTick.startTiming(); // Paper - timings
         this.getChunkProvider().tick(booleansupplier);
         this.timings.chunkProviderTick.stopTiming(); // Paper - timings
-        gameprofilerfiller.exitEnter("tickPending");
+        //gameprofilerfiller.exitEnter("tickPending"); // Akarin - remove caller
         timings.scheduledBlocks.startTiming(); // Paper
         if (!this.isDebugWorld()) {
             this.nextTickListBlock.b();
@@ -900,17 +900,17 @@ public class WorldServer extends World implements GeneratorAccessSeed {
         timings.scheduledBlocks.stopTiming(); // Paper
 
         // Tuinity - replace logic
-        gameprofilerfiller.exitEnter("raid");
+        //gameprofilerfiller.exitEnter("raid"); // Akarin - remove caller
         this.timings.raids.startTiming(); // Paper - timings
         this.persistentRaid.a();
         this.timings.raids.stopTiming(); // Paper - timings
-        gameprofilerfiller.exitEnter("blockEvents");
+        //gameprofilerfiller.exitEnter("blockEvents"); // Akarin - remove caller
         timings.doSounds.startTiming(); // Spigot
         this.ah();
         timings.doSounds.stopTiming(); // Spigot
         // Tuinity - replace logic
         this.ticking = false;
-        gameprofilerfiller.exitEnter("entities");
+        //gameprofilerfiller.exitEnter("entities"); // Akarin - remove caller
         boolean flag3 = true || !this.players.isEmpty() || !this.getForceLoadedChunks().isEmpty(); // CraftBukkit - this prevents entity cleanup, other issues on servers with no players
 
         if (flag3) {
@@ -943,12 +943,12 @@ public class WorldServer extends World implements GeneratorAccessSeed {
                 }
                 // CraftBukkit end */
 
-                gameprofilerfiller.enter("checkDespawn");
+                //gameprofilerfiller.enter("checkDespawn"); // Akarin - remove caller
                 if (!entity.dead) {
                     entity.checkDespawn();
                 }
 
-                gameprofilerfiller.exit();
+                //gameprofilerfiller.exit(); // Akarin - remove caller
                 if (entity1 != null) {
                     if (!entity1.dead && entity1.w(entity)) {
                         continue;
@@ -957,20 +957,20 @@ public class WorldServer extends World implements GeneratorAccessSeed {
                     entity.stopRiding();
                 }
 
-                gameprofilerfiller.enter("tick");
+                //gameprofilerfiller.enter("tick"); // Akarin - remove caller
                 if (!entity.dead && !(entity instanceof EntityComplexPart)) {
                     this.a(this::entityJoinedWorld, entity);
                 }
 
-                gameprofilerfiller.exit();
-                gameprofilerfiller.enter("remove");
+                //gameprofilerfiller.exit(); // Akarin - remove caller
+                //gameprofilerfiller.enter("remove"); // Akarin - remove caller
                 if (entity.dead) {
                     this.removeEntityFromChunk(entity);
                     this.entitiesById.remove(entity.getId()); // Tuinity
                     this.unregisterEntity(entity);
                 }
 
-                gameprofilerfiller.exit();
+                //gameprofilerfiller.exit(); // Akarin - remove caller
             }
             timings.entityTick.stopTiming(); // Spigot
 
@@ -1000,7 +1000,7 @@ public class WorldServer extends World implements GeneratorAccessSeed {
             this.tickBlockEntities();
         }
 
-        gameprofilerfiller.exit();
+        //gameprofilerfiller.exit(); // Akarin - remove caller
     }
 
     protected void b() {
@@ -1049,7 +1049,7 @@ public class WorldServer extends World implements GeneratorAccessSeed {
         int k = chunkcoordintpair.e();
         GameProfilerFiller gameprofilerfiller = this.getMethodProfiler();
 
-        gameprofilerfiller.enter("thunder");
+        //gameprofilerfiller.enter("thunder"); // Akarin - remove caller
         final BlockPosition.MutableBlockPosition blockposition = this.chunkTickMutablePosition; // Paper - use mutable to reduce allocation rate, final to force compile fail on change
 
         if (!this.paperConfig.disableThunder && flag && this.T() && this.random.nextInt(100000) == 0) { // Paper - Disable thunder
@@ -1075,7 +1075,7 @@ public class WorldServer extends World implements GeneratorAccessSeed {
             }
         }
 
-        gameprofilerfiller.exitEnter("iceandsnow");
+        //gameprofilerfiller.exitEnter("iceandsnow"); // Akarin - remove caller
         if (!this.paperConfig.disableIceAndSnow && this.randomTickRandom.nextInt(16) == 0) { // Paper - Disable ice and snow // Paper - optimise random ticking
             // Paper start - optimise chunk ticking
             this.getRandomBlockPosition(j, 0, k, 15, blockposition);
@@ -1106,9 +1106,9 @@ public class WorldServer extends World implements GeneratorAccessSeed {
         }
 
         // Paper start - optimise random block ticking
-        gameprofilerfiller.exit();
+        //gameprofilerfiller.exit(); // Akarin - remove caller
         if (i > 0) {
-            gameprofilerfiller.enter("randomTick");
+            //gameprofilerfiller.enter("randomTick"); // Akarin - remove caller
             timings.chunkTicksBlocks.startTiming(); // Paper
 
             ChunkSection[] sections = chunk.getSections();
@@ -1143,7 +1143,7 @@ public class WorldServer extends World implements GeneratorAccessSeed {
                     // TODO CHECK ON UPDATE
                 }
             }
-            gameprofilerfiller.exit();
+            //gameprofilerfiller.exit(); // Akarin - remove caller
             timings.chunkTicksBlocks.stopTiming(); // Paper
             getChunkProvider().getLightEngine().queueUpdate(); // Paper
             // Paper end
@@ -1284,10 +1284,10 @@ public class WorldServer extends World implements GeneratorAccessSeed {
                 gameprofilerfiller.a(() -> {
                     return IRegistry.ENTITY_TYPE.getKey(entity.getEntityType()).toString();
                 });
-                gameprofilerfiller.c("tickNonPassenger");
+                //gameprofilerfiller.c("tickNonPassenger"); // Akarin - remove caller
                 entity.tick();
                 entity.postTick(); // CraftBukkit
-                gameprofilerfiller.exit();
+                //gameprofilerfiller.exit(); // Akarin - remove caller
             }
 
             this.chunkCheck(entity);
@@ -1325,9 +1325,9 @@ public class WorldServer extends World implements GeneratorAccessSeed {
                     gameprofilerfiller.a(() -> {
                         return IRegistry.ENTITY_TYPE.getKey(entity1.getEntityType()).toString();
                     });
-                    gameprofilerfiller.c("tickPassenger");
+                    //gameprofilerfiller.c("tickPassenger"); // Akarin - remove caller
                     entity1.passengerTick();
-                    gameprofilerfiller.exit();
+                    //gameprofilerfiller.exit(); // Akarin - remove caller
                 }
 
                 this.chunkCheck(entity1);
@@ -1349,7 +1349,7 @@ public class WorldServer extends World implements GeneratorAccessSeed {
 
     public void chunkCheck(Entity entity) {
         if (entity.ck()) {
-            this.getMethodProfiler().enter("chunkCheck");
+            //this.getMethodProfiler().enter("chunkCheck"); // Akarin - remove caller
             int i = MathHelper.floor(entity.locX() / 16.0D);
             int j =  Math.min(15, Math.max(0, MathHelper.floor(entity.locY() / 16.0D))); // Paper - stay consistent with chunk add/remove behavior
             int k = MathHelper.floor(entity.locZ() / 16.0D);
@@ -1377,7 +1377,7 @@ public class WorldServer extends World implements GeneratorAccessSeed {
                 }
             }
 
-            this.getMethodProfiler().exit();
+            //this.getMethodProfiler().exit(); // Akarin - remove caller
         }
     }
 
